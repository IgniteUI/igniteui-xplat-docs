trigger:
  branches:
    include:
    - vnext
    - master
  paths:
    exclude:
    - '**/en/*'
pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
  - name: buildType
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      value: 'production'
    ${{ else }}:  
      value: 'staging'
  # Since we are using more than 1 git repo, we need to explicitly specify that we want to compile inside the 1st git repo
  - name: selfSourcesDir
    value: '$(Build.SourcesDirectory)\igniteui-xplat-docs'
  # This is the variable that the gulp script looks at internally. This is the only way I know how to pass it for Angular
  - name: 'NODE_ENV'
    value: '$(buildType)'

resources:
  repositories:
    - repository: IgniteUIDocFX
      endpoint: ESShared
      type: github
      name: IgniteUI/igniteui-docfx
      ref: '$(Build.SourceBranch)'

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildDocs
    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'

    - task: RegexReplace@3
      displayName: 'replace environment in doc/docfx'
      inputs:
        InputSearchPattern: |
          doc\**\*.*
          docfx\**\*.*
        FindRegex: 'environment:dvDemosBaseUrl'
        ReplaceRegex: 'environment:demosBaseUrl'
        UseUTF8: true
        UseRAW: true
      enabled: false

    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom
        workingDir: '$(selfSourcesDir)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: ci

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: WebComponents
        language: jp
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: Blazor
        language: jp
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: React
        language: jp
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: WebComponents
        language: kr
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: Blazor
        language: kr
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    - template: templates/build-steps-template.yml
      parameters:
        buildType: $(buildType)
        platform: React
        language: kr
        workingDir: '$(selfSourcesDir)'
        isVerbose: ${{ parameters.isVerbose }}

    # Angular doesn't produce an artifact so we are publish right now.
    - task: PublishPipelineArtifact@1
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'XPlatDocFX'

    - template: templates/build-steps-make-pr.yml
      parameters:
        buildType: $(buildType)
        platform: Angular
        language: jp
        isVerbose: ${{ parameters.isVerbose }}
        primaryRepoWorkDir: '$(selfSourcesDir)'

    - template: templates/build-steps-make-pr.yml
      parameters:
        buildType: $(buildType)
        platform: Angular
        language: kr
        isVerbose: ${{ parameters.isVerbose }}
        primaryRepoWorkDir: '$(selfSourcesDir)'
