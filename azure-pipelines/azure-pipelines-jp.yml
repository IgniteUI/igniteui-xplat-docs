trigger:
  branches:
    include:
    - vnext
    - master
  paths:
    exclude:
    - en/*
pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
  component: 'XPlatDocFX'
  buildType: 'staging'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildType: 'production'

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildDocs
    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'
    - script: echo '$(Build.BuildNumber)'
      displayName: 'Display Build Number'

    - script: echo '$(buildType)'
      displayName: 'Display Build Type'

    - task: RegexReplace@3
      displayName: 'replace environment in doc/docfx'
      inputs:
        InputSearchPattern: |
          doc\**\*.*
          docfx\**\*.*
        FindRegex: 'environment:dvDemosBaseUrl'
        ReplaceRegex: 'environment:demosBaseUrl'
        UseUTF8: true
        UseRAW: true
      enabled: false

    - task: Npm@1
      displayName: 'npm cache clean'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: 'cache clean --force'
      continueOnError: true

    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: ci


    - task: Npm@1
      displayName: 'Build WebComponents $(buildType) jp'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: 'run build-$(buildType) -- --plat=WebComponents --lang=jp'

    - task: ArchiveFiles@2
      displayName: 'Package WebComponents jp - zip'
      inputs:
        verbose: ${{ parameters.isVerbose }}
        rootFolderOrFile: $(Build.SourcesDirectory)/dist/WebComponents/jp/_site
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(component)_WebComponents_jp_$(buildType).zip
        replaceExistingArchive: true

    - task: Npm@1
      displayName: 'Build Blazor JP'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: 'run build-$(buildType) -- --plat=Blazor --lang=jp'

    - task: ArchiveFiles@2
      displayName: 'Package Blazor jp - zip'
      inputs:
        verbose: ${{ parameters.isVerbose }}
        rootFolderOrFile: $(Build.SourcesDirectory)/dist/Blazor/jp/_site
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(component)_Blazor_jp_$(buildType).zip
        replaceExistingArchive: true

    - task: Npm@1
      displayName: 'Build React JP'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: ${{ parameters.isVerbose }}
        customCommand: 'run build-$(buildType) -- --plat=React --lang=jp'

    - task: ArchiveFiles@2
      displayName: 'Package React jp - zip'
      inputs:
        verbose: ${{ parameters.isVerbose }}
        rootFolderOrFile: $(Build.SourcesDirectory)/dist/React/jp/_site
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(component)_React_jp_$(buildType).zip
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: '$(component)'
