trigger:
  branches:
    include:
    - vnext
    - master
pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
  component: 'XPlatDocFX'
  buildType: $(buildType)
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildType: 'production'

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildDocs

    steps:
    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'
    - script: echo '$(Build.BuildNumber)'
      displayName: 'Display Build Number'
    - script: echo '$(buildType)'
      displayName: 'Display Build Type'

    - task: RegexReplace@3
      displayName: 'replace environment in doc/docfx'
      inputs:
        InputSearchPattern: |
          doc\**\*.*
          docfx\**\*.*
        FindRegex: 'environment:dvDemosBaseUrl'
        ReplaceRegex: 'environment:demosBaseUrl'
        UseUTF8: true
        UseRAW: true
      enabled: false

    - task: Npm@1
      displayName: 'npm cache clean'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: 'cache clean --force'
      continueOnError: true

    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: ci

    - task: Npm@1
      displayName: 'Build Blazor EN'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: 'run build-$(buildType) -- --plat=Blazor --lang=en'

    - task: NuGetCommand@2
      displayName: 'Package Blazor EN'
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)\$(component).nuspec'
        versioningScheme: byBuildNumber
        buildProperties: 'langFolder=en;type=$(buildType);plat=Blazor'

    - task: Npm@1
      displayName: 'Build React EN'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: 'run build-$(buildType) -- --plat=React --lang=en'

    - task: NuGetCommand@2
      displayName: 'Package React EN'
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)\$(component).nuspec'
        versioningScheme: byBuildNumber
        buildProperties: 'langFolder=en;type=$(buildType);plat=React'

  - job: 
    displayName: 'Build WebComponents - EN'
    variables:
      platform: WebComponents
      language: en
    steps:
    - task: Npm@1
      displayName: 'Build $(platform)'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: 'run build$(platform)'
    - task: Npm@1
      displayName: 'Build $(platform) $(buildType) $(language)'
      inputs:
        command: custom
        workingDir: '$(Build.SourcesDirectory)'
        verbose: false
        customCommand: 'run build-$(buildType) -- --plat=$(platform) --lang=$(language)'
    - task: NuGetCommand@2
      displayName: 'Package $(platform) $(language)'
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)\$(component).nuspec'
        versioningScheme: byBuildNumber
        buildProperties: 'langFolder=$(language);type=$(buildType);plat=$(platform)'
    - task: ArchiveFiles@2
      displayName: 'Package $(platform) $(language) - zip'
      inputs:
        # dist\$plat$\$langFolder$\_site
        rootFolderOrFile: $(Build.SourcesDirectory)/dist/$(platform)/$(language)/_site
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: zips/$(component)_$(platform)_$(language)_$(buildType).zip
        replaceExistingArchive: true
  - job: 
    displayName: 'Publish NuGet artifacts'
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.Artifact$(buildType)Directory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.Artifact$(buildType)Directory)'
        artifact: 'XPlatDocs'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish $(platform) $(language) - zip'
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/zips
        artifactName: $(component)
